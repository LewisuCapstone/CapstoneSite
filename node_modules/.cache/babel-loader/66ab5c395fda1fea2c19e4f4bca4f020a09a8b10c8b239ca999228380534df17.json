{"ast":null,"code":"var _jsxFileName = \"D:\\\\Documents\\\\School\\\\Lewis\\\\Software Systems Capstone CPSC-49200-003\\\\Community Charity App\\\\Capstone-Site\\\\my-app\\\\src\\\\User_Authentication.js\",\n  _s = $RefreshSig$();\n/* \r\nThis code is for user authentication with email and password using \r\nFirebase authentication library.\r\n\r\nThe useState hook is used to create state variables for the email, \r\npassword, confirm password, and error fields. The handleSignUp function now checks \r\nwhether the entered passwords match before proceeding to hash the password using bcrypt \r\nbefore calling createUserWithEmailAndPassword. The handleSignIn and handleSignUp functions \r\nboth now include a setError call to update the error state if an error occurs during \r\nauthentication. Additionally, the error message is displayed in the UI when an error \r\noccurs using a conditional rendering statement.\r\n*/\n\n// Import necessary packages and libraries:\nimport React, { useState } from \"react\"; // used to manage state within functional components.\nimport bcrypt from \"bcryptjs\"; // used to securely hash passwords.\n// Import the functions you need from the SDKs you need\n\n// *** FUNCTIONS ***\n\n// * USER AUTHENTICATION *\n/* \r\nInside the component, we use useState to define four state variables: email, \r\npassword, confirmPassword, and error. email, password, and confirmPassword will \r\nbe used to store the user input for the email address, password, and confirm password \r\nfields, respectively. error will be used to store error messages that may occur \r\nduring authentication.\r\n*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function UserAuthentication() {\n  _s();\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [error, setError] = useState(\"\");\n\n  // * HANDLE SIGN IN *\n  /* \r\n  handleSignIn is a function that will be called when the user clicks the \r\n  \"Sign In\" button. Inside the function, we use Firebase Authentication's \r\n  signInWithEmailAndPassword function to authenticate the user. If the authentication\r\n  is successful, we log the user object to the console. If there is an error during \r\n  authentication, we log the error message to the console and set the error state \r\n  variable to the error message.\r\n  */\n  const handleSignIn = () => {\n    firebase.auth().signInWithEmailAndPassword(email, password).then(userCredential => {\n      // Signed in\n      const user = userCredential.user;\n      console.log(user);\n    }).catch(error => {\n      const errorCode = error.code;\n      const errorMessage = error.message;\n      console.log(errorCode, errorMessage);\n      setError(errorMessage);\n    });\n  };\n\n  // * HANDLE SIGN UP*\n  /* \r\n  handleSignUp is a function that will be called when the user clicks the \r\n  \"Sign Up\" button. We first check if the password and confirm password fields match. \r\n  If they don't match, we set the error state variable to \"Passwords do not match\" and \r\n  return from the function to prevent further execution. If the passwords match, we \r\n  use bcrypt to hash the password before calling Firebase Authentication's \r\n  createUserWithEmailAndPassword function to create a new user. If the user is \r\n  successfully created, we log the user object to the console. If there is an error \r\n  during user creation, we log the error message to the console and set the error state \r\n  variable to the error message.\r\n  */\n  const handleSignUp = () => {\n    if (password !== confirmPassword) {\n      setError(\"Passwords do not match\");\n      return;\n    }\n    const salt = bcrypt.genSaltSync(10);\n    const hashedPassword = bcrypt.hashSync(password, salt);\n    firebase.auth().createUserWithEmailAndPassword(email, hashedPassword).then(userCredential => {\n      // Signed up\n      const user = userCredential.user;\n      console.log(user);\n    }).catch(error => {\n      const errorCode = error.code;\n      const errorMessage = error.message;\n      console.log(errorCode, errorMessage);\n      setError(errorMessage);\n    });\n  };\n\n  // *** RENDER THE UI ***\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Sign In\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"email\",\n      children: \"Email:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"email\",\n      id: \"email\",\n      value: email,\n      onChange: event => setEmail(event.target.value),\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"password\",\n      children: \"Password:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"password\",\n      id: \"password\",\n      value: password,\n      onChange: event => setPassword(event.target.value),\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"confirmPassword\",\n      children: \"Confirm Password:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"password\",\n      id: \"confirmPassword\",\n      value: confirmPassword,\n      onChange: event => setConfirmPassword(event.target.value),\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSignIn,\n      children: \"Sign In\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSignUp,\n      children: \"Sign Up\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n}\n_s(UserAuthentication, \"Km21cqbBuCgLw0eInTKwcP7TYQA=\");\n_c = UserAuthentication;\nexport default UserAuthentication;\nvar _c;\n$RefreshReg$(_c, \"UserAuthentication\");","map":{"version":3,"names":["React","useState","bcrypt","UserAuthentication","email","setEmail","password","setPassword","confirmPassword","setConfirmPassword","error","setError","handleSignIn","firebase","auth","signInWithEmailAndPassword","then","userCredential","user","console","log","catch","errorCode","code","errorMessage","message","handleSignUp","salt","genSaltSync","hashedPassword","hashSync","createUserWithEmailAndPassword","color","event","target","value"],"sources":["D:/Documents/School/Lewis/Software Systems Capstone CPSC-49200-003/Community Charity App/Capstone-Site/my-app/src/User_Authentication.js"],"sourcesContent":["\r\n/* \r\nThis code is for user authentication with email and password using \r\nFirebase authentication library.\r\n\r\nThe useState hook is used to create state variables for the email, \r\npassword, confirm password, and error fields. The handleSignUp function now checks \r\nwhether the entered passwords match before proceeding to hash the password using bcrypt \r\nbefore calling createUserWithEmailAndPassword. The handleSignIn and handleSignUp functions \r\nboth now include a setError call to update the error state if an error occurs during \r\nauthentication. Additionally, the error message is displayed in the UI when an error \r\noccurs using a conditional rendering statement.\r\n*/\r\n\r\n// Import necessary packages and libraries:\r\nimport React, { useState } from \"react\"; // used to manage state within functional components.\r\nimport bcrypt from \"bcryptjs\"; // used to securely hash passwords.\r\n// Import the functions you need from the SDKs you need\r\n\r\n// *** FUNCTIONS ***\r\n\r\n// * USER AUTHENTICATION *\r\n/* \r\nInside the component, we use useState to define four state variables: email, \r\npassword, confirmPassword, and error. email, password, and confirmPassword will \r\nbe used to store the user input for the email address, password, and confirm password \r\nfields, respectively. error will be used to store error messages that may occur \r\nduring authentication.\r\n*/\r\n\r\nexport function UserAuthentication() {\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  \r\n// * HANDLE SIGN IN *\r\n/* \r\nhandleSignIn is a function that will be called when the user clicks the \r\n\"Sign In\" button. Inside the function, we use Firebase Authentication's \r\nsignInWithEmailAndPassword function to authenticate the user. If the authentication\r\nis successful, we log the user object to the console. If there is an error during \r\nauthentication, we log the error message to the console and set the error state \r\nvariable to the error message.\r\n*/\r\n  const handleSignIn = () => {\r\n    firebase.auth().signInWithEmailAndPassword(email, password)\r\n      .then((userCredential) => {\r\n        // Signed in\r\n        const user = userCredential.user;\r\n        console.log(user);\r\n      })\r\n      .catch((error) => {\r\n        const errorCode = error.code;\r\n        const errorMessage = error.message;\r\n        console.log(errorCode, errorMessage);\r\n        setError(errorMessage);\r\n      });\r\n  };\r\n  \r\n// * HANDLE SIGN UP*\r\n/* \r\nhandleSignUp is a function that will be called when the user clicks the \r\n\"Sign Up\" button. We first check if the password and confirm password fields match. \r\nIf they don't match, we set the error state variable to \"Passwords do not match\" and \r\nreturn from the function to prevent further execution. If the passwords match, we \r\nuse bcrypt to hash the password before calling Firebase Authentication's \r\ncreateUserWithEmailAndPassword function to create a new user. If the user is \r\nsuccessfully created, we log the user object to the console. If there is an error \r\nduring user creation, we log the error message to the console and set the error state \r\nvariable to the error message.\r\n*/\r\n  const handleSignUp = () => {\r\n    if (password !== confirmPassword) {\r\n      setError(\"Passwords do not match\");\r\n      return;\r\n    }\r\n    \r\n    \r\n    const salt = bcrypt.genSaltSync(10);\r\n    const hashedPassword = bcrypt.hashSync(password, salt);\r\n\r\n    firebase.auth().createUserWithEmailAndPassword(email, hashedPassword)\r\n      .then((userCredential) => {\r\n        // Signed up\r\n        const user = userCredential.user;\r\n        console.log(user);\r\n      })\r\n      .catch((error) => {\r\n        const errorCode = error.code;\r\n        const errorMessage = error.message;\r\n        console.log(errorCode, errorMessage);\r\n        setError(errorMessage);\r\n      });\r\n  };\r\n\r\n\r\n// *** RENDER THE UI ***\r\n  \r\n  return (\r\n    <div>\r\n      <h2>Sign In</h2>\r\n      {error && <p style={{ color: \"red\" }}>{error}</p>}\r\n      <label htmlFor=\"email\">Email:</label>\r\n      <input\r\n        type=\"email\"\r\n        id=\"email\"\r\n        value={email}\r\n        onChange={(event) => setEmail(event.target.value)}\r\n        required\r\n      />\r\n\r\n      <label htmlFor=\"password\">Password:</label>\r\n      <input\r\n        type=\"password\"\r\n        id=\"password\"\r\n        value={password}\r\n        onChange={(event) => setPassword(event.target.value)}\r\n        required\r\n      />\r\n\r\n      <label htmlFor=\"confirmPassword\">Confirm Password:</label>\r\n      <input\r\n        type=\"password\"\r\n        id=\"confirmPassword\"\r\n        value={confirmPassword}\r\n        onChange={(event) => setConfirmPassword(event.target.value)}\r\n        required\r\n      />\r\n\r\n      <button onClick={handleSignIn}>Sign In</button>\r\n      <button onClick={handleSignUp}>Sign Up</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UserAuthentication;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}